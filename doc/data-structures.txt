------------------------------------------------------------------------------
 0. INTRODUCTION
------------------------------------------------------------------------------

The NSMF core has defined a number of data structure for the consistent
representation of it's internal data states.

The data structures are collectively grouped under the following:
  * Infrastructure
  * NSM data
  * Policy and Control



------------------------------------------------------------------------------
 1.0. INFRASTRUCTURE
------------------------------------------------------------------------------

The infrastructure data types are broken down in to the following types:
  * Agent, and
  * Node.

The data types are described below.


------------------------------------------------------------------------------
 1.1. AGENT
------------------------------------------------------------------------------

"agent" => {
  "id" => 5,
  "name" => "paladin"
  "password" => "hash",
  "description" => "complete network security monitoring.",
  "ip" => "2001:db8:85a3::7334",
  "status_state" => 1
  "status_timestamp" => 1231223123.124233,
}

The field descriptions are:
  * id
    - The unique agent ID which represents a system of node(s)

  * name
    - A literal name for the agent

  * password
    - The unique agent password use to authenticate itself to he server

  * description
    - A literal description of for the agent

  * ip
    - The IP address of the agent

  * status_state
    - The last known state of the agent

  * status_timestamp
    - The timestamp (in unix epoch and microseconds appended) of the last
      known state


------------------------------------------------------------------------------
 1.2. NODE (AGENT COMPONENT)
------------------------------------------------------------------------------

"node" => {
  "id" => 7,
  "agent_id" => 5,
  "name" => "paladin"
  "description" => "complete network security monitoring.",
  "type" => "cxtracker",
  "network" => "dmz",
  "status_state" => 1
  "status_timestamp" => 1231223123.124233,
}

The field descriptions are:
  * id
    - The unique ID of the node

  * agent_id
    - The unique agent ID which this node is associated with

  * name
    - A literal name for the node

  * description
    - A literal description for the node

  * type
    - The literal type name for the node

  * network
    - A literal name for the network that the node is monitoring

  * status_state
    - The last known state of the node

  * status_timestamp
    - The timestamp (in unix epoch and microseconds appended) of the last
      known state



------------------------------------------------------------------------------
 2.0. NSM DATA
------------------------------------------------------------------------------

The NSM data is broken down in to the following types:
  * Event (Alert),
  * Session,
  * Statitisic,
  * Full Packet, and
  * Data Objects

The data types are described below.


------------------------------------------------------------------------------
 2.1. EVENT (ALERT)
------------------------------------------------------------------------------

In PERL format

"event" => {
  "id" => 1407,
  "timestamp" => 1231223123.124233,
  "classification" => 0,
  "node_id" => 1,
  "net" => {
  "net_version" => 4,
  "net_protocol" => 6,
  "net_src_ip => "61.34.18.49",
  "net_src_port" => 3545
  "net_dst_ip" => "192.168.1.56",
  "net_dst_port" => 13
  "sig_type" => 1
  "sig_id" => 527,
  "sig_revision" => 8,
  "sig_message" => "DELETED BAD ALERT Unknown Traffic."
  "sig_priority" => 2,
  "sig_category" => "bad-unknown",
  "meta_u2_event_id" => 1
  "meta_u2_filename" => "snort.u2.1234131123"
}


The field descriptions are:
  * id
    - The unique event ID of the node which generated the event (alert)

  * timestamp
    - The node's best timestamp (in unix epoch and microseconds appended)
      of when the event (alert) occured

  * classification
    - The classification of the event (alert). 0 = not yet classified

  * node_id
    - The unique node ID which generated the event (alert)

  * net_version
    - The IP version being used: 4 = IPv4, 6 = IPv6

  * net_protocol
    - The protocol version being using: 1 = ICMP, 6 = TCP, 17 = UDP

  * net_src_ip
    - The source/originating IP address of the session

  * net_src_port
    - The source/originating port of the session. For ICMP traffic the
      port refers to the ICMP type

  * net_dst_ip
    - The destination/receiving IP address of the session

  * net_dst_port
    - The destination/receiving port of the session. For ICMP traffic
      the port refers to the ICMP code


  * signature
    - An object describing the signature (rule, behaviour, etc) that triggered
      the event (alert)

      * type
        - The type ID of the signature (eg. Snort rule = 1, prads rule = 2)

      * id
        - The unique ID for this type of signature (eg. Snort SID)

      * revision
        - The revision number of this signature (eg. Snort SID-REV)

      * message
        - An OPTIONAL succinct message that describes the signature's purpose

      * priority
        - The specific priority associated with this type of signature

      * category
        - A general universal category that this signature belows to (eg.
          Snort classification such as "bad-unknown")

  * meta_*
    - An extendible object that defines any additional, vendor specific
      information pertaining to the event (alert)

      For example:

      * meta_u2_event_id
        - The associated unified2 event ID

      * meta_u2_filename
        - The unified2 file that contained the event (alert)


------------------------------------------------------------------------------
 2.2. SESSION
------------------------------------------------------------------------------

In PERL format

"session" => {
  "id" => 1407,
  "timestamp" => 1231223123.124233,
  "time_start" => 1231223123.124233,
  "time_end" => 1231333133.565345
  "time_duration" => 10.441112
  "node_id" => 1,
  "net_version" => 4,
  "net_protocol" => 6,
  "net_src_ip => "61.34.18.49",
  "net_src_port" => 3545
  "net_src_total_packets" => 232,
  "net_total_bytes" => 3242
  "net_flags" => 23,
  "net_dst_ip" => "192.168.1.56",
  "net_dst_port" => 13
  "net_dst_total_packets" => 232,
  "net_dst_total_bytes" => 3242
  "net_dst_flags" => 21,
  "data_id": 7,
  "data_offset" => 234235
  "data_length" => 2342
  "meta_cxt_id" => 1
}


The field descriptions are:
  * node_id
    - The unique node ID which generated the session

  * id
    - The unique session ID of the node which detected the session

  * timestamp
    - The node's best timestamp (in unix epoch and microseconds appended)
      of when the session occured

  * time_start
    - The node's best timestamp (in unix epoch and microseconds
      appended) of when the session started

  * time_end
    - The node's best timestamp (in unix epoch and microseconds
      appended) of when the session ended

  * time_duration
    - The node's best estimate of duration for the session

  * net_version
    - The IP version being used: 4 = IPv4, 6 = IPv6

  * net_protocol
    - The protocol version being using: 1 = ICMP, 6 = TCP, 17 = UDP

  * net_src_ip
    - The source/originating IP address of the session

  * net_src_port
    - The source/originating port of the session. For ICMP traffic the
      port refers to the ICMP type

  * net_src_total_packets
    - The total number of packets originating from the source IP
      during the session

  * net_src_total_bytes
    - The total number of bytes originating from the source IP during
      the session

  * net_src_flags
    - The cumulative protocol flags of packets originating from the
      source IP seen during the session

  * net_dst_ip
    - The destination/receiving IP address of the session

  * net_dst_port
    - The destination/receiving port of the session. For ICMP traffic
      the port refers to the ICMP code

  * net_dst_total_packets
    - The total number of packets originating from the destination IP
      during the session

  * net_dst_total_bytes
    - The total number of bytes originating from the destination IP
      during the session

  * net_dst_flags
    - The cumulative protocol flags of packets originating from the
      destination IP seen during the session

  * data_filename
    - The filename of the pcap (or full packet capture) that contains the
      session

  * data_offset
    - The byte offset to the first byte of the first packet in the
      sesssion

  * data_length
    - The length in bytes from the first byte of the first packet to the
      the last byte of the last packet inclusive

  * meta_*
    - An extendible object that defines any additional, vendor specific
      information pertaining to the session

      For example:

      * meta_cxt_id
        - The associated cxtracker session ID


------------------------------------------------------------------------------
 2.3. STATISTIC
------------------------------------------------------------------------------

TBD

"statistic" => {

}


------------------------------------------------------------------------------
 2.4. PCAP DATA
------------------------------------------------------------------------------

TBD

"data" => {
  "id" => 7,
  "timestamp" => 1231223123.124233,
  "filename" => "pcap.1213123123",
  "node_id" => 1,
}


------------------------------------------------------------------------------
 2.5. DATA OBJECT
------------------------------------------------------------------------------

TBD

"object" => {
  "id" => 33,
  "timestamp" => 1231223123.124233,
  "filename" => "wicked.exe",
  "length" => 2342,
  "checksum_md5" => "6bbf0e9b5d9309748f6a8f8b8ed6b941",
  "checksum_sha256" => "59339f51a1405beeb496538757e9cb6dc481398171cc26a071f9648dd9027c6d",
  "node_id" => 1
}


------------------------------------------------------------------------------
 3.0. POLICY AND CONTROL
------------------------------------------------------------------------------

The policy and control data types are broken down in to the following types:
  * Signature
  * Policy
  * Grouping
  * Variable

The data types are described below.


------------------------------------------------------------------------------
 3.1. SIGNATURE
------------------------------------------------------------------------------

The type + hash uniquely identifies a signature.

"signature" => {
  "type" => 1
  "hash" => "4ea664c1b887d7fbf734a1a5e07a4dbfbe40056a"
  "signature" => "alert tcp $EXTERNAL_NET any -> any any (msg:"Test signature");" 

  "id" => 527,
  "parent_id" => 541,
  "revision" => 8,
  "category" => "bad-unknown",
  "priority" => 2,
  "message" => "DELETED BAD ALERT Unknown Traffic."
}

The field descriptions are:
  * type
    - The type ID of the signature (eg. Snort rule = 1, PRADS rule = 2, BRO rule = 3)

  * hash
    - The cryptographic hash value of 'signature' to distinctively identify a signature in 
      HEXADECIMAL format using SHA-256.

  * signature
    - The raw/complete signature/rule used by the IDS (eg. the contents of one Snort Rule)

  * id
    - The unique ID for this type of signature (eg. content of Snort SID)

  * parent_id
    - The OPTIONAL unique ID for this signatures's parent signature, if any.
 
  * revision
    - The OPTIONAL revision number of this signature (eg. content of Snort SID-REV)

  * category
    - A OPTIONAL general universal category that this signature belows to (eg. Snort classification such as "bad-unknown")

  * priority
    - The OPTIONAL specific priority associated with this type of signature

  * message
    - An OPTIONAL succinct message that describes the signature's purpose (e.g. Snort Message or Bro Event)

  * meta_*
    - An extendible object that defines any additional, vendor specific
      information pertaining to the session

      For example:

      * Snort/Suricata
        - A snort/suricata vendor object representing a raw snort signature

          * gid
            - The Generator ID of the snort rule

          * sid
            - The ID of the snort rule

          * revision
            - The Revision of the snort rule

      * Bro
        - A snort/suricata vendor object representing a raw Bro signature

          * id
            - The ID of the bro rule (unique label)

          * attribute_*
            - An extendible object that define additional information for this Bro signature.

      * "Other" IDS
        - A "Other" IDS vendor object representing a raw "Other" IDS signature

          ...


------------------------------------------------------------------------------
 3.2. POLICY
------------------------------------------------------------------------------

"policy" => {
  "type" => 1
  "id" => 528,
  "parent_id" => 0,
  "name" => "MySQL Servers",
  "desc" => "A policy to cover my MySQL Servers.",

  "group_signatures" => [666,512]
  "group_nodes" => [1,231]
  "group_variables" => [22,33]
}

The field descriptions are:
  * type
    - The type ID of the policy (eg. GLOBAL POLICY = 1, LOCAL POLICY = 2)

  * id
    - The unique ID for this type of policy (eg. Auto-increment)

  * parent_id
    - The OPTIONAL unique ID for this policy's parent policy, if any.
 
  * name
    - The name of this policy (eg. Apache 2.2.14 Signatures) 

  * desc
    - The description of this policy (eg. More meat-on-the-bone as to what it's purpose is.)

  * group_signatures
    - The ID's of the groups of signatures to attach this policy to. (e.g. To signature groups 666 and 512)

  * group_nodes
    - The ID's of the groups of signatures to attach this policy to. (e.g. Two node groups containing Snort Nodes )

  * group_variables
    - The ID's of the groups of variables to attach this policy to.


------------------------------------------------------------------------------
 3.3 GROUPING
------------------------------------------------------------------------------

"grouping" => {
  "id" => 666,
  "type" => 1,
  "name" => "Snort Nodes",
  "desc" => "My Snort Sensors!"
  "objects" => [1,2,3,4]
}

The field descriptions are:
  * id
    - The unique ID for this node group (eg. Auto-increment)

  * type
    - The type ID of the this group (eg. 1 = nodes, 2 = signatures, 3 = variables)
 
  * name
    - A describing name of this node group (eg. Snort Sensors or MySQL Servers )

  * desc
    - The description of this node group (eg. These are my X sensors! )
 
  * objects
    - The linked objects attached to this group (eg. Node 1 and Node 2, or Signature 4231 or Signature 132331)


------------------------------------------------------------------------------
 3.4 VARIABLE
------------------------------------------------------------------------------

"variable" => {
  "id" => 1,
  "key" => "snort::interface",
  "value" => "eth0"
}

The field descriptions are:
  * id
    - The unique ID for this variable (eg. Auto-Increment )

  * key
    - The key (name) of this variable (eg. update interval)
 
  * value
    - The generic value of this variable key. (eg. 300 <- this being the update interval )


